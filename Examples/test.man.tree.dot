digraph tree {
	rankdir=HR;
	node [shape=record];
	node0xaed710 [color=red, label="<left> left | { OPERATOR | func } | <right> right"];
	node0xaed7d0 [color=green, label="<left> left | { IDENTIFIER | main } | <right> right"];
	node0xaed8f0 [color=red, label="<left> left | { OPERATOR | void } | <right> right"];
	node0xaed7d0:left -> node0xaed8f0;
	node0xaedd30 [color=red, label="<left> left | { OPERATOR | ; } | <right> right"];
	node0xaeda90 [color=red, label="<left> left | { OPERATOR | var } | <right> right"];
	node0xaedbf0 [color=red, label="<left> left | { OPERATOR | = } | <right> right"];
	node0xaedb50 [color=green, label="<left> left | { IDENTIFIER | num } | <right> right"];
	node0xaedbf0:left -> node0xaedb50;
	node0xaedc90 [color=blue, label="<left> left | { NUMBER | 5.0 } | <right> right"];
	node0xaedbf0:right -> node0xaedc90;
	node0xaeda90:left -> node0xaedbf0;
	node0xaedd30:left -> node0xaeda90;
	node0xaee100 [color=red, label="<left> left | { OPERATOR | ; } | <right> right"];
	node0xaedfa0 [color=red, label="<left> left | { OPERATOR | call } | <right> right"];
	node0xaede00 [color=green, label="<left> left | { IDENTIFIER | factorial_recursive } | <right> right"];
	node0xaedfa0:left -> node0xaede00;
	node0xaedfc0 [color=green, label="<left> left | { IDENTIFIER | num } | <right> right"];
	node0xaedfa0:right -> node0xaedfc0;
	node0xaee100:left -> node0xaedfa0;
	node0xaee4d0 [color=red, label="<left> left | { OPERATOR | ; } | <right> right"];
	node0xaee370 [color=red, label="<left> left | { OPERATOR | call } | <right> right"];
	node0xaee1d0 [color=green, label="<left> left | { IDENTIFIER | factorial_iterative } | <right> right"];
	node0xaee370:left -> node0xaee1d0;
	node0xaee390 [color=green, label="<left> left | { IDENTIFIER | num } | <right> right"];
	node0xaee370:right -> node0xaee390;
	node0xaee4d0:left -> node0xaee370;
	node0xaee6b0 [color=red, label="<left> left | { OPERATOR | ; } | <right> right"];
	node0xaee570 [color=red, label="<left> left | { OPERATOR | ret } | <right> right"];
	node0xaee610 [color=blue, label="<left> left | { NUMBER | 0.0 } | <right> right"];
	node0xaee570:left -> node0xaee610;
	node0xaee6b0:left -> node0xaee570;
	node0xaee4d0:right -> node0xaee6b0;
	node0xaee100:right -> node0xaee4d0;
	node0xaedd30:right -> node0xaee100;
	node0xaed7d0:right -> node0xaedd30;
	node0xaed710:left -> node0xaed7d0;
	node0xaee7e0 [color=red, label="<left> left | { OPERATOR | func } | <right> right"];
	node0xaee8b0 [color=green, label="<left> left | { IDENTIFIER | factorial_recursive } | <right> right"];
	node0xaee9f0 [color=red, label="<left> left | { OPERATOR | var } | <right> right"];
	node0xaeeac0 [color=green, label="<left> left | { IDENTIFIER | num } | <right> right"];
	node0xaee9f0:left -> node0xaeeac0;
	node0xaee8b0:left -> node0xaee9f0;
	node0xaef350 [color=red, label="<left> left | { OPERATOR | ; } | <right> right"];
	node0xaeec70 [color=red, label="<left> left | { OPERATOR | if } | <right> right"];
	node0xaeee50 [color=red, label="<left> left | { OPERATOR | \<= } | <right> right"];
	node0xaeedb0 [color=green, label="<left> left | { IDENTIFIER | num } | <right> right"];
	node0xaeee50:left -> node0xaeedb0;
	node0xaeeef0 [color=blue, label="<left> left | { NUMBER | 1.0 } | <right> right"];
	node0xaeee50:right -> node0xaeeef0;
	node0xaeec70:left -> node0xaeee50;
	node0xaef1d0 [color=red, label="<left> left | { OPERATOR | ; } | <right> right"];
	node0xaef090 [color=red, label="<left> left | { OPERATOR | ret } | <right> right"];
	node0xaef130 [color=blue, label="<left> left | { NUMBER | 1.0 } | <right> right"];
	node0xaef090:left -> node0xaef130;
	node0xaef1d0:left -> node0xaef090;
	node0xaeec70:right -> node0xaef1d0;
	node0xaef350:left -> node0xaeec70;
	node0xaefab0 [color=red, label="<left> left | { OPERATOR | ; } | <right> right"];
	node0xaef370 [color=red, label="<left> left | { OPERATOR | ret } | <right> right"];
	node0xaef510 [color=red, label="<left> left | { OPERATOR | * } | <right> right"];
	node0xaef450 [color=green, label="<left> left | { IDENTIFIER | num } | <right> right"];
	node0xaef510:left -> node0xaef450;
	node0xaef7b0 [color=red, label="<left> left | { OPERATOR | call } | <right> right"];
	node0xaef5f0 [color=green, label="<left> left | { IDENTIFIER | factorial_recursive } | <right> right"];
	node0xaef7b0:left -> node0xaef5f0;
	node0xaef890 [color=red, label="<left> left | { OPERATOR | - } | <right> right"];
	node0xaef7d0 [color=green, label="<left> left | { IDENTIFIER | num } | <right> right"];
	node0xaef890:left -> node0xaef7d0;
	node0xaef950 [color=blue, label="<left> left | { NUMBER | 1.0 } | <right> right"];
	node0xaef890:right -> node0xaef950;
	node0xaef7b0:right -> node0xaef890;
	node0xaef510:right -> node0xaef7b0;
	node0xaef370:left -> node0xaef510;
	node0xaefab0:left -> node0xaef370;
	node0xaef350:right -> node0xaefab0;
	node0xaee8b0:right -> node0xaef350;
	node0xaee7e0:left -> node0xaee8b0;
	node0xaefbe0 [color=red, label="<left> left | { OPERATOR | func } | <right> right"];
	node0xaefcb0 [color=green, label="<left> left | { IDENTIFIER | factorial_iterative } | <right> right"];
	node0xaefdf0 [color=red, label="<left> left | { OPERATOR | var } | <right> right"];
	node0xaefec0 [color=green, label="<left> left | { IDENTIFIER | num } | <right> right"];
	node0xaefdf0:left -> node0xaefec0;
	node0xaefcb0:left -> node0xaefdf0;
	node0xaf0310 [color=red, label="<left> left | { OPERATOR | ; } | <right> right"];
	node0xaf0070 [color=red, label="<left> left | { OPERATOR | var } | <right> right"];
	node0xaf01d0 [color=red, label="<left> left | { OPERATOR | = } | <right> right"];
	node0xaf0130 [color=green, label="<left> left | { IDENTIFIER | ans } | <right> right"];
	node0xaf01d0:left -> node0xaf0130;
	node0xaf0270 [color=blue, label="<left> left | { NUMBER | 1.0 } | <right> right"];
	node0xaf01d0:right -> node0xaf0270;
	node0xaf0070:left -> node0xaf01d0;
	node0xaf0310:left -> node0xaf0070;
	node0xaf10b0 [color=red, label="<left> left | { OPERATOR | ; } | <right> right"];
	node0xaf03b0 [color=red, label="<left> left | { OPERATOR | while } | <right> right"];
	node0xaf0590 [color=red, label="<left> left | { OPERATOR | \> } | <right> right"];
	node0xaf04f0 [color=green, label="<left> left | { IDENTIFIER | num } | <right> right"];
	node0xaf0590:left -> node0xaf04f0;
	node0xaf0630 [color=blue, label="<left> left | { NUMBER | 1.0 } | <right> right"];
	node0xaf0590:right -> node0xaf0630;
	node0xaf03b0:left -> node0xaf0590;
	node0xaf0b50 [color=red, label="<left> left | { OPERATOR | ; } | <right> right"];
	node0xaf0890 [color=red, label="<left> left | { OPERATOR | = } | <right> right"];
	node0xaf07f0 [color=green, label="<left> left | { IDENTIFIER | ans } | <right> right"];
	node0xaf0890:left -> node0xaf07f0;
	node0xaf09f0 [color=red, label="<left> left | { OPERATOR | * } | <right> right"];
	node0xaf0950 [color=green, label="<left> left | { IDENTIFIER | ans } | <right> right"];
	node0xaf09f0:left -> node0xaf0950;
	node0xaf0ab0 [color=green, label="<left> left | { IDENTIFIER | num } | <right> right"];
	node0xaf09f0:right -> node0xaf0ab0;
	node0xaf0890:right -> node0xaf09f0;
	node0xaf0b50:left -> node0xaf0890;
	node0xaf0f50 [color=red, label="<left> left | { OPERATOR | ; } | <right> right"];
	node0xaf0cb0 [color=red, label="<left> left | { OPERATOR | = } | <right> right"];
	node0xaf0c10 [color=green, label="<left> left | { IDENTIFIER | num } | <right> right"];
	node0xaf0cb0:left -> node0xaf0c10;
	node0xaf0e10 [color=red, label="<left> left | { OPERATOR | - } | <right> right"];
	node0xaf0d70 [color=green, label="<left> left | { IDENTIFIER | num } | <right> right"];
	node0xaf0e10:left -> node0xaf0d70;
	node0xaf0eb0 [color=blue, label="<left> left | { NUMBER | 1.0 } | <right> right"];
	node0xaf0e10:right -> node0xaf0eb0;
	node0xaf0cb0:right -> node0xaf0e10;
	node0xaf0f50:left -> node0xaf0cb0;
	node0xaf0b50:right -> node0xaf0f50;
	node0xaf03b0:right -> node0xaf0b50;
	node0xaf10b0:left -> node0xaf03b0;
	node0xaf1230 [color=red, label="<left> left | { OPERATOR | ; } | <right> right"];
	node0xaf10d0 [color=red, label="<left> left | { OPERATOR | ret } | <right> right"];
	node0xaf1190 [color=green, label="<left> left | { IDENTIFIER | ans } | <right> right"];
	node0xaf10d0:left -> node0xaf1190;
	node0xaf1230:left -> node0xaf10d0;
	node0xaf10b0:right -> node0xaf1230;
	node0xaf0310:right -> node0xaf10b0;
	node0xaefcb0:right -> node0xaf0310;
	node0xaefbe0:left -> node0xaefcb0;
	node0xaf1310 [color=yellow, label="<left> left | { END | 0 } | <right> right"];
	node0xaefbe0:right -> node0xaf1310;
	node0xaee7e0:right -> node0xaefbe0;
	node0xaed710:right -> node0xaee7e0;
}
