digraph tree {
	rankdir=HR;
	node [shape=record];
	node0xb6e6b0 [color=red, label="<left> left | { OPERATOR | func } | <right> right"];
	node0xb6e740 [color=green, label="<left> left | { IDENTIFIER | main } | <right> right"];
	node0xb6e800 [color=red, label="<left> left | { OPERATOR | void } | <right> right"];
	node0xb6e740:left -> node0xb6e800;
	node0xb6eaf0 [color=red, label="<left> left | { OPERATOR | ; } | <right> right"];
	node0xb6e910 [color=red, label="<left> left | { OPERATOR | var } | <right> right"];
	node0xb6ea10 [color=red, label="<left> left | { OPERATOR | = } | <right> right"];
	node0xb6e9a0 [color=green, label="<left> left | { IDENTIFIER | num } | <right> right"];
	node0xb6ea10:left -> node0xb6e9a0;
	node0xb6ea80 [color=blue, label="<left> left | { NUMBER | 500 } | <right> right"];
	node0xb6ea10:right -> node0xb6ea80;
	node0xb6e910:left -> node0xb6ea10;
	node0xb6eaf0:left -> node0xb6e910;
	node0xb6edc0 [color=red, label="<left> left | { OPERATOR | ; } | <right> right"];
	node0xb6ecc0 [color=red, label="<left> left | { OPERATOR | call } | <right> right"];
	node0xb6eb90 [color=green, label="<left> left | { IDENTIFIER | factorial_recursive } | <right> right"];
	node0xb6ecc0:left -> node0xb6eb90;
	node0xb6ece0 [color=green, label="<left> left | { IDENTIFIER | num } | <right> right"];
	node0xb6ecc0:right -> node0xb6ece0;
	node0xb6edc0:left -> node0xb6ecc0;
	node0xb6f090 [color=red, label="<left> left | { OPERATOR | ; } | <right> right"];
	node0xb6ef90 [color=red, label="<left> left | { OPERATOR | call } | <right> right"];
	node0xb6ee60 [color=green, label="<left> left | { IDENTIFIER | factorial_iterative } | <right> right"];
	node0xb6ef90:left -> node0xb6ee60;
	node0xb6efb0 [color=green, label="<left> left | { IDENTIFIER | num } | <right> right"];
	node0xb6ef90:right -> node0xb6efb0;
	node0xb6f090:left -> node0xb6ef90;
	node0xb6f1e0 [color=red, label="<left> left | { OPERATOR | ; } | <right> right"];
	node0xb6f100 [color=red, label="<left> left | { OPERATOR | ret } | <right> right"];
	node0xb6f170 [color=blue, label="<left> left | { NUMBER | 0 } | <right> right"];
	node0xb6f100:left -> node0xb6f170;
	node0xb6f1e0:left -> node0xb6f100;
	node0xb6f090:right -> node0xb6f1e0;
	node0xb6edc0:right -> node0xb6f090;
	node0xb6eaf0:right -> node0xb6edc0;
	node0xb6e740:right -> node0xb6eaf0;
	node0xb6e6b0:left -> node0xb6e740;
	node0xb6f2b0 [color=red, label="<left> left | { OPERATOR | func } | <right> right"];
	node0xb6f350 [color=green, label="<left> left | { IDENTIFIER | factorial_recursive } | <right> right"];
	node0xb6f430 [color=red, label="<left> left | { OPERATOR | var } | <right> right"];
	node0xb6f4d0 [color=green, label="<left> left | { IDENTIFIER | num } | <right> right"];
	node0xb6f430:left -> node0xb6f4d0;
	node0xb6f350:left -> node0xb6f430;
	node0xb6fab0 [color=red, label="<left> left | { OPERATOR | ; } | <right> right"];
	node0xb6f5f0 [color=red, label="<left> left | { OPERATOR | if } | <right> right"];
	node0xb6f740 [color=red, label="<left> left | { OPERATOR | \<= } | <right> right"];
	node0xb6f6d0 [color=green, label="<left> left | { IDENTIFIER | num } | <right> right"];
	node0xb6f740:left -> node0xb6f6d0;
	node0xb6f7b0 [color=blue, label="<left> left | { NUMBER | 100 } | <right> right"];
	node0xb6f740:right -> node0xb6f7b0;
	node0xb6f5f0:left -> node0xb6f740;
	node0xb6f9a0 [color=red, label="<left> left | { OPERATOR | ; } | <right> right"];
	node0xb6f8c0 [color=red, label="<left> left | { OPERATOR | ret } | <right> right"];
	node0xb6f930 [color=blue, label="<left> left | { NUMBER | 100 } | <right> right"];
	node0xb6f8c0:left -> node0xb6f930;
	node0xb6f9a0:left -> node0xb6f8c0;
	node0xb6f5f0:right -> node0xb6f9a0;
	node0xb6fab0:left -> node0xb6f5f0;
	node0xb70050 [color=red, label="<left> left | { OPERATOR | ; } | <right> right"];
	node0xb6fad0 [color=red, label="<left> left | { OPERATOR | ret } | <right> right"];
	node0xb6fc10 [color=red, label="<left> left | { OPERATOR | * } | <right> right"];
	node0xb6fb80 [color=green, label="<left> left | { IDENTIFIER | num } | <right> right"];
	node0xb6fc10:left -> node0xb6fb80;
	node0xb6fe10 [color=red, label="<left> left | { OPERATOR | call } | <right> right"];
	node0xb6fcc0 [color=green, label="<left> left | { IDENTIFIER | factorial_recursive } | <right> right"];
	node0xb6fe10:left -> node0xb6fcc0;
	node0xb6fec0 [color=red, label="<left> left | { OPERATOR | - } | <right> right"];
	node0xb6fe30 [color=green, label="<left> left | { IDENTIFIER | num } | <right> right"];
	node0xb6fec0:left -> node0xb6fe30;
	node0xb6ff50 [color=blue, label="<left> left | { NUMBER | 100 } | <right> right"];
	node0xb6fec0:right -> node0xb6ff50;
	node0xb6fe10:right -> node0xb6fec0;
	node0xb6fc10:right -> node0xb6fe10;
	node0xb6fad0:left -> node0xb6fc10;
	node0xb70050:left -> node0xb6fad0;
	node0xb6fab0:right -> node0xb70050;
	node0xb6f350:right -> node0xb6fab0;
	node0xb6f2b0:left -> node0xb6f350;
	node0xb70120 [color=red, label="<left> left | { OPERATOR | func } | <right> right"];
	node0xb701c0 [color=green, label="<left> left | { IDENTIFIER | factorial_iterative } | <right> right"];
	node0xb702a0 [color=red, label="<left> left | { OPERATOR | var } | <right> right"];
	node0xb70340 [color=green, label="<left> left | { IDENTIFIER | num } | <right> right"];
	node0xb702a0:left -> node0xb70340;
	node0xb701c0:left -> node0xb702a0;
	node0xb70640 [color=red, label="<left> left | { OPERATOR | ; } | <right> right"];
	node0xb70460 [color=red, label="<left> left | { OPERATOR | var } | <right> right"];
	node0xb70560 [color=red, label="<left> left | { OPERATOR | = } | <right> right"];
	node0xb704f0 [color=green, label="<left> left | { IDENTIFIER | ans } | <right> right"];
	node0xb70560:left -> node0xb704f0;
	node0xb705d0 [color=blue, label="<left> left | { NUMBER | 100 } | <right> right"];
	node0xb70560:right -> node0xb705d0;
	node0xb70460:left -> node0xb70560;
	node0xb70640:left -> node0xb70460;
	node0xb70fe0 [color=red, label="<left> left | { OPERATOR | ; } | <right> right"];
	node0xb706b0 [color=red, label="<left> left | { OPERATOR | while } | <right> right"];
	node0xb70800 [color=red, label="<left> left | { OPERATOR | \> } | <right> right"];
	node0xb70790 [color=green, label="<left> left | { IDENTIFIER | num } | <right> right"];
	node0xb70800:left -> node0xb70790;
	node0xb70870 [color=blue, label="<left> left | { NUMBER | 100 } | <right> right"];
	node0xb70800:right -> node0xb70870;
	node0xb706b0:left -> node0xb70800;
	node0xb70c10 [color=red, label="<left> left | { OPERATOR | ; } | <right> right"];
	node0xb70a10 [color=red, label="<left> left | { OPERATOR | = } | <right> right"];
	node0xb709a0 [color=green, label="<left> left | { IDENTIFIER | ans } | <right> right"];
	node0xb70a10:left -> node0xb709a0;
	node0xb70b10 [color=red, label="<left> left | { OPERATOR | * } | <right> right"];
	node0xb70aa0 [color=green, label="<left> left | { IDENTIFIER | ans } | <right> right"];
	node0xb70b10:left -> node0xb70aa0;
	node0xb70ba0 [color=green, label="<left> left | { IDENTIFIER | num } | <right> right"];
	node0xb70b10:right -> node0xb70ba0;
	node0xb70a10:right -> node0xb70b10;
	node0xb70c10:left -> node0xb70a10;
	node0xb70ef0 [color=red, label="<left> left | { OPERATOR | ; } | <right> right"];
	node0xb70d10 [color=red, label="<left> left | { OPERATOR | = } | <right> right"];
	node0xb70ca0 [color=green, label="<left> left | { IDENTIFIER | num } | <right> right"];
	node0xb70d10:left -> node0xb70ca0;
	node0xb70e10 [color=red, label="<left> left | { OPERATOR | - } | <right> right"];
	node0xb70da0 [color=green, label="<left> left | { IDENTIFIER | num } | <right> right"];
	node0xb70e10:left -> node0xb70da0;
	node0xb70e80 [color=blue, label="<left> left | { NUMBER | 100 } | <right> right"];
	node0xb70e10:right -> node0xb70e80;
	node0xb70d10:right -> node0xb70e10;
	node0xb70ef0:left -> node0xb70d10;
	node0xb70c10:right -> node0xb70ef0;
	node0xb706b0:right -> node0xb70c10;
	node0xb70fe0:left -> node0xb706b0;
	node0xb71100 [color=red, label="<left> left | { OPERATOR | ; } | <right> right"];
	node0xb71000 [color=red, label="<left> left | { OPERATOR | ret } | <right> right"];
	node0xb71090 [color=green, label="<left> left | { IDENTIFIER | ans } | <right> right"];
	node0xb71000:left -> node0xb71090;
	node0xb71100:left -> node0xb71000;
	node0xb70fe0:right -> node0xb71100;
	node0xb70640:right -> node0xb70fe0;
	node0xb701c0:right -> node0xb70640;
	node0xb70120:left -> node0xb701c0;
	node0xb711a0 [color=yellow, label="<left> left | { END | 0 } | <right> right"];
	node0xb70120:right -> node0xb711a0;
	node0xb6f2b0:right -> node0xb70120;
	node0xb6e6b0:right -> node0xb6f2b0;
}
