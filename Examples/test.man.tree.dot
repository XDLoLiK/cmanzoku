digraph tree {
	rankdir=HR;
	node [shape=record];
	node0xef16b0 [color=red, label="<left> left | { OPERATOR | func } | <right> right"];
	node0xef1740 [color=green, label="<left> left | { IDENTIFIER | main } | <right> right"];
	node0xef1800 [color=red, label="<left> left | { OPERATOR | void } | <right> right"];
	node0xef1740:left -> node0xef1800;
	node0xef1af0 [color=red, label="<left> left | { OPERATOR | ; } | <right> right"];
	node0xef1910 [color=red, label="<left> left | { OPERATOR | var } | <right> right"];
	node0xef1a10 [color=red, label="<left> left | { OPERATOR | = } | <right> right"];
	node0xef19a0 [color=green, label="<left> left | { IDENTIFIER | num } | <right> right"];
	node0xef1a10:left -> node0xef19a0;
	node0xef1a80 [color=blue, label="<left> left | { NUMBER | 500 } | <right> right"];
	node0xef1a10:right -> node0xef1a80;
	node0xef1910:left -> node0xef1a10;
	node0xef1af0:left -> node0xef1910;
	node0xef1dc0 [color=red, label="<left> left | { OPERATOR | ; } | <right> right"];
	node0xef1cc0 [color=red, label="<left> left | { OPERATOR | call } | <right> right"];
	node0xef1b90 [color=green, label="<left> left | { IDENTIFIER | factorial_recursive } | <right> right"];
	node0xef1cc0:left -> node0xef1b90;
	node0xef1ce0 [color=green, label="<left> left | { IDENTIFIER | num } | <right> right"];
	node0xef1cc0:right -> node0xef1ce0;
	node0xef1dc0:left -> node0xef1cc0;
	node0xef2090 [color=red, label="<left> left | { OPERATOR | ; } | <right> right"];
	node0xef1f90 [color=red, label="<left> left | { OPERATOR | call } | <right> right"];
	node0xef1e60 [color=green, label="<left> left | { IDENTIFIER | factorial_iterative } | <right> right"];
	node0xef1f90:left -> node0xef1e60;
	node0xef1fb0 [color=green, label="<left> left | { IDENTIFIER | num } | <right> right"];
	node0xef1f90:right -> node0xef1fb0;
	node0xef2090:left -> node0xef1f90;
	node0xef21e0 [color=red, label="<left> left | { OPERATOR | ; } | <right> right"];
	node0xef2100 [color=red, label="<left> left | { OPERATOR | ret } | <right> right"];
	node0xef2170 [color=blue, label="<left> left | { NUMBER | 0 } | <right> right"];
	node0xef2100:left -> node0xef2170;
	node0xef21e0:left -> node0xef2100;
	node0xef2090:right -> node0xef21e0;
	node0xef1dc0:right -> node0xef2090;
	node0xef1af0:right -> node0xef1dc0;
	node0xef1740:right -> node0xef1af0;
	node0xef16b0:left -> node0xef1740;
	node0xef22b0 [color=red, label="<left> left | { OPERATOR | func } | <right> right"];
	node0xef2350 [color=green, label="<left> left | { IDENTIFIER | factorial_recursive } | <right> right"];
	node0xef2430 [color=red, label="<left> left | { OPERATOR | var } | <right> right"];
	node0xef24d0 [color=green, label="<left> left | { IDENTIFIER | num } | <right> right"];
	node0xef2430:left -> node0xef24d0;
	node0xef2350:left -> node0xef2430;
	node0xef2ab0 [color=red, label="<left> left | { OPERATOR | ; } | <right> right"];
	node0xef25f0 [color=red, label="<left> left | { OPERATOR | if } | <right> right"];
	node0xef2740 [color=red, label="<left> left | { OPERATOR | \<= } | <right> right"];
	node0xef26d0 [color=green, label="<left> left | { IDENTIFIER | num } | <right> right"];
	node0xef2740:left -> node0xef26d0;
	node0xef27b0 [color=blue, label="<left> left | { NUMBER | 100 } | <right> right"];
	node0xef2740:right -> node0xef27b0;
	node0xef25f0:left -> node0xef2740;
	node0xef29a0 [color=red, label="<left> left | { OPERATOR | ; } | <right> right"];
	node0xef28c0 [color=red, label="<left> left | { OPERATOR | ret } | <right> right"];
	node0xef2930 [color=blue, label="<left> left | { NUMBER | 100 } | <right> right"];
	node0xef28c0:left -> node0xef2930;
	node0xef29a0:left -> node0xef28c0;
	node0xef25f0:right -> node0xef29a0;
	node0xef2ab0:left -> node0xef25f0;
	node0xef3050 [color=red, label="<left> left | { OPERATOR | ; } | <right> right"];
	node0xef2ad0 [color=red, label="<left> left | { OPERATOR | ret } | <right> right"];
	node0xef2c10 [color=red, label="<left> left | { OPERATOR | * } | <right> right"];
	node0xef2b80 [color=green, label="<left> left | { IDENTIFIER | num } | <right> right"];
	node0xef2c10:left -> node0xef2b80;
	node0xef2e10 [color=red, label="<left> left | { OPERATOR | call } | <right> right"];
	node0xef2cc0 [color=green, label="<left> left | { IDENTIFIER | factorial_recursive } | <right> right"];
	node0xef2e10:left -> node0xef2cc0;
	node0xef2ec0 [color=red, label="<left> left | { OPERATOR | - } | <right> right"];
	node0xef2e30 [color=green, label="<left> left | { IDENTIFIER | num } | <right> right"];
	node0xef2ec0:left -> node0xef2e30;
	node0xef2f50 [color=blue, label="<left> left | { NUMBER | 100 } | <right> right"];
	node0xef2ec0:right -> node0xef2f50;
	node0xef2e10:right -> node0xef2ec0;
	node0xef2c10:right -> node0xef2e10;
	node0xef2ad0:left -> node0xef2c10;
	node0xef3050:left -> node0xef2ad0;
	node0xef2ab0:right -> node0xef3050;
	node0xef2350:right -> node0xef2ab0;
	node0xef22b0:left -> node0xef2350;
	node0xef3120 [color=red, label="<left> left | { OPERATOR | func } | <right> right"];
	node0xef31c0 [color=green, label="<left> left | { IDENTIFIER | factorial_iterative } | <right> right"];
	node0xef32a0 [color=red, label="<left> left | { OPERATOR | var } | <right> right"];
	node0xef3340 [color=green, label="<left> left | { IDENTIFIER | num } | <right> right"];
	node0xef32a0:left -> node0xef3340;
	node0xef31c0:left -> node0xef32a0;
	node0xef3640 [color=red, label="<left> left | { OPERATOR | ; } | <right> right"];
	node0xef3460 [color=red, label="<left> left | { OPERATOR | var } | <right> right"];
	node0xef3560 [color=red, label="<left> left | { OPERATOR | = } | <right> right"];
	node0xef34f0 [color=green, label="<left> left | { IDENTIFIER | ans } | <right> right"];
	node0xef3560:left -> node0xef34f0;
	node0xef35d0 [color=blue, label="<left> left | { NUMBER | 100 } | <right> right"];
	node0xef3560:right -> node0xef35d0;
	node0xef3460:left -> node0xef3560;
	node0xef3640:left -> node0xef3460;
	node0xef3fe0 [color=red, label="<left> left | { OPERATOR | ; } | <right> right"];
	node0xef36b0 [color=red, label="<left> left | { OPERATOR | while } | <right> right"];
	node0xef3800 [color=red, label="<left> left | { OPERATOR | \> } | <right> right"];
	node0xef3790 [color=green, label="<left> left | { IDENTIFIER | num } | <right> right"];
	node0xef3800:left -> node0xef3790;
	node0xef3870 [color=blue, label="<left> left | { NUMBER | 100 } | <right> right"];
	node0xef3800:right -> node0xef3870;
	node0xef36b0:left -> node0xef3800;
	node0xef3c10 [color=red, label="<left> left | { OPERATOR | ; } | <right> right"];
	node0xef3a10 [color=red, label="<left> left | { OPERATOR | = } | <right> right"];
	node0xef39a0 [color=green, label="<left> left | { IDENTIFIER | ans } | <right> right"];
	node0xef3a10:left -> node0xef39a0;
	node0xef3b10 [color=red, label="<left> left | { OPERATOR | * } | <right> right"];
	node0xef3aa0 [color=green, label="<left> left | { IDENTIFIER | ans } | <right> right"];
	node0xef3b10:left -> node0xef3aa0;
	node0xef3ba0 [color=green, label="<left> left | { IDENTIFIER | num } | <right> right"];
	node0xef3b10:right -> node0xef3ba0;
	node0xef3a10:right -> node0xef3b10;
	node0xef3c10:left -> node0xef3a10;
	node0xef3ef0 [color=red, label="<left> left | { OPERATOR | ; } | <right> right"];
	node0xef3d10 [color=red, label="<left> left | { OPERATOR | = } | <right> right"];
	node0xef3ca0 [color=green, label="<left> left | { IDENTIFIER | num } | <right> right"];
	node0xef3d10:left -> node0xef3ca0;
	node0xef3e10 [color=red, label="<left> left | { OPERATOR | - } | <right> right"];
	node0xef3da0 [color=green, label="<left> left | { IDENTIFIER | num } | <right> right"];
	node0xef3e10:left -> node0xef3da0;
	node0xef3e80 [color=blue, label="<left> left | { NUMBER | 100 } | <right> right"];
	node0xef3e10:right -> node0xef3e80;
	node0xef3d10:right -> node0xef3e10;
	node0xef3ef0:left -> node0xef3d10;
	node0xef3c10:right -> node0xef3ef0;
	node0xef36b0:right -> node0xef3c10;
	node0xef3fe0:left -> node0xef36b0;
	node0xef4100 [color=red, label="<left> left | { OPERATOR | ; } | <right> right"];
	node0xef4000 [color=red, label="<left> left | { OPERATOR | ret } | <right> right"];
	node0xef4090 [color=green, label="<left> left | { IDENTIFIER | ans } | <right> right"];
	node0xef4000:left -> node0xef4090;
	node0xef4100:left -> node0xef4000;
	node0xef3fe0:right -> node0xef4100;
	node0xef3640:right -> node0xef3fe0;
	node0xef31c0:right -> node0xef3640;
	node0xef3120:left -> node0xef31c0;
	node0xef41a0 [color=yellow, label="<left> left | { END | 0 } | <right> right"];
	node0xef3120:right -> node0xef41a0;
	node0xef22b0:right -> node0xef3120;
	node0xef16b0:right -> node0xef22b0;
}
